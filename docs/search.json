[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "thesctrading",
    "section": "",
    "text": "Our team is implementing a buy low / sell high strategy focused on short-term momentum trading in TSLA stock. We aim to take advantage of periods of elevated volatility and momentum, holding positions for 10 trading days or less. We use the 10 day window to account for the fact that some of our data sources are weekly and may provide more signal over a longer trade horizon. Of course, if the system hits its limit point during the window, the position will close similar to our HW1 model.\nnote that we plan to use backward elimination ML method to determine most important features. We plan to trial a variety of alternative data features from FRED (detailed at the end of the website) as well as some competitor company technical factors. We also wish to include valuation metrics using the yfinance package.\n\n\nPre-Trade Filter\n\nCheck if job postings for software roles increased week-over-week (as well as other FRED/alternative data including pairs performance)\nCheck if implied volatility (IV) percentile &gt; 50% and &lt; 90%\nIf both are true → proceed to trade evaluation\n\n\nBuy Conditions\n\nPrice is above the 50-day SMA (or EMA) note we may also include valuation metrics here to avoid extreme overvaluation given our long-only strategy\nGamma exposure is positive (or some other Greek we can calculate)\n\n\n\n\n\n\nWe use four exit triggers to manage risk and lock in profits:\n\nIf position is open for more than 10 trading days, exit regardless of performance\nIf IV percentile drops below 30%, exit\nExit if price reaches a profit target of 2x last week’s average true range (ATR)\nUse a trailing stop loss of 1.5x ATR below the highest price reached since entry\n\n\n\n\n\nPosition size will adapt based on strength of indicators and perhaps on a regression of additional features not used to determine the weekly position strategy similar to the logistic regression model used in HW1. We envision a less binary model where sizing is continuous determined on a variety of features (allows us to take risk off but also keep risk on more granularly than the original model).\nConditions for each tier will be finalized after further backtesting.\n\n\n\n\nWe plan to collect and process:\n\nPrice data and technical indicators (SMA, ATR, IV, Options contracts)\nJob posting data & other relevant metrics from FRED\nAutomotive industry data from FRED\nImplied volatility percentile data (via IBKR)\n\nWe may use the FRED API, yFinance, or custom scrapers to automate data gathering.\n\n\n\n\n\nGather full feature list and find good alt data and implement backward elimination model to decide useful features\nBuild & backtest position sizing model\nBacktest the strategy on historical TSLA data\nDeploy the final version to https://thesctrading.com\n\n\n\n\nThe below is demonstrating our ability to use the FRED API to pull in features. This example is weekly software job postings. We plan to scour FRED to identify other features that may be useful. Other things may include potential regulatory items or things indicating sentiment on Elon as well as other automotive industry stats including production, CPI, etc. We plan to test a variety and perhaps identify the most powerful features through supervised feature selection methods. Likely backward selection where the model evaluates all the features and removes the least powerful/most noisy one by one.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom fredapi import Fred\n\n# Connect to FRED\nfred = Fred(api_key=\"1c00931ee7dc4304c6bb68b72fb2d68f\")\n\n# Fetch data\nseries_id = \"IHLIDXUSTPSOFTDEVE\"\ndata = fred.get_series(series_id)\n\n# Convert to DataFrame\ndf = pd.DataFrame(data, columns=[\"Job Postings\"])\ndf.index.name = \"Date\"\ndf = df.reset_index()\n\n# Display last 5 rows as table\ndf.tail()\n\n\n\n\n\n\n\n\n\nDate\nJob Postings\n\n\n\n\n1899\n2025-04-14\n64.17\n\n\n1900\n2025-04-15\n64.04\n\n\n1901\n2025-04-16\n63.84\n\n\n1902\n2025-04-17\n63.81\n\n\n1903\n2025-04-18\n63.77\n\n\n\n\n\n\n\n\n\nCode\n# Plot the time series\nplt.figure(figsize=(10, 4))\nplt.plot(df[\"Date\"], df[\"Job Postings\"], linewidth=2)\nplt.title(\"US Software Developer Job Postings Index\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Index Value\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "index.html#sc-trading-strategy-overview",
    "href": "index.html#sc-trading-strategy-overview",
    "title": "thesctrading",
    "section": "",
    "text": "Our team is implementing a buy low / sell high strategy focused on short-term momentum trading in TSLA stock. We aim to take advantage of periods of elevated volatility and momentum, holding positions for 10 trading days or less. We use the 10 day window to account for the fact that some of our data sources are weekly and may provide more signal over a longer trade horizon. Of course, if the system hits its limit point during the window, the position will close similar to our HW1 model.\nnote that we plan to use backward elimination ML method to determine most important features. We plan to trial a variety of alternative data features from FRED (detailed at the end of the website) as well as some competitor company technical factors. We also wish to include valuation metrics using the yfinance package.\n\n\nPre-Trade Filter\n\nCheck if job postings for software roles increased week-over-week (as well as other FRED/alternative data including pairs performance)\nCheck if implied volatility (IV) percentile &gt; 50% and &lt; 90%\nIf both are true → proceed to trade evaluation\n\n\nBuy Conditions\n\nPrice is above the 50-day SMA (or EMA) note we may also include valuation metrics here to avoid extreme overvaluation given our long-only strategy\nGamma exposure is positive (or some other Greek we can calculate)\n\n\n\n\n\n\nWe use four exit triggers to manage risk and lock in profits:\n\nIf position is open for more than 10 trading days, exit regardless of performance\nIf IV percentile drops below 30%, exit\nExit if price reaches a profit target of 2x last week’s average true range (ATR)\nUse a trailing stop loss of 1.5x ATR below the highest price reached since entry\n\n\n\n\n\nPosition size will adapt based on strength of indicators and perhaps on a regression of additional features not used to determine the weekly position strategy similar to the logistic regression model used in HW1. We envision a less binary model where sizing is continuous determined on a variety of features (allows us to take risk off but also keep risk on more granularly than the original model).\nConditions for each tier will be finalized after further backtesting.\n\n\n\n\nWe plan to collect and process:\n\nPrice data and technical indicators (SMA, ATR, IV, Options contracts)\nJob posting data & other relevant metrics from FRED\nAutomotive industry data from FRED\nImplied volatility percentile data (via IBKR)\n\nWe may use the FRED API, yFinance, or custom scrapers to automate data gathering.\n\n\n\n\n\nGather full feature list and find good alt data and implement backward elimination model to decide useful features\nBuild & backtest position sizing model\nBacktest the strategy on historical TSLA data\nDeploy the final version to https://thesctrading.com\n\n\n\n\nThe below is demonstrating our ability to use the FRED API to pull in features. This example is weekly software job postings. We plan to scour FRED to identify other features that may be useful. Other things may include potential regulatory items or things indicating sentiment on Elon as well as other automotive industry stats including production, CPI, etc. We plan to test a variety and perhaps identify the most powerful features through supervised feature selection methods. Likely backward selection where the model evaluates all the features and removes the least powerful/most noisy one by one.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom fredapi import Fred\n\n# Connect to FRED\nfred = Fred(api_key=\"1c00931ee7dc4304c6bb68b72fb2d68f\")\n\n# Fetch data\nseries_id = \"IHLIDXUSTPSOFTDEVE\"\ndata = fred.get_series(series_id)\n\n# Convert to DataFrame\ndf = pd.DataFrame(data, columns=[\"Job Postings\"])\ndf.index.name = \"Date\"\ndf = df.reset_index()\n\n# Display last 5 rows as table\ndf.tail()\n\n\n\n\n\n\n\n\n\nDate\nJob Postings\n\n\n\n\n1899\n2025-04-14\n64.17\n\n\n1900\n2025-04-15\n64.04\n\n\n1901\n2025-04-16\n63.84\n\n\n1902\n2025-04-17\n63.81\n\n\n1903\n2025-04-18\n63.77\n\n\n\n\n\n\n\n\n\nCode\n# Plot the time series\nplt.figure(figsize=(10, 4))\nplt.plot(df[\"Date\"], df[\"Job Postings\"], linewidth=2)\nplt.title(\"US Software Developer Job Postings Index\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Index Value\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()"
  }
]